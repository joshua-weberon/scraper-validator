{"version":3,"sources":["utility/cleaners.js","typeConfig.js","utility/index.js","components/FileReader.js","components/SelectionTabs.js","utility/constants.js","components/Details/Titles.js","components/Details/Buttons.js","components/Details/index.js","components/Main/UserInput.js","components/Main/Forms.js","components/Main/index.js","components/Identification/Idinput.js","components/Identification/index.js","components/Details/ValidationError.js","App.js","utility/storage.js","index.js"],"names":["trimCleaner","data","trim","commaCleaner","replace","cleaningPipe","cleanData","functions","forEach","fun","emptyCleaner","streetCleaner","cityCleaner","typeConfig","label","sourceCleaner","inputCleaner","image","summaryIdentifiers","types","Object","keys","convertFileToBase64","allFiles","Promise","resolve","ef","file","files","base64","fileList","reader","FileReader","onloadend","e","result","readAsText","getContentInJSON","content","window","csvtojsonV2","fromString","then","getConfiguredData","config","idArray","inputJSON","map","json","index","identifier","reduce","acc","id","isSelected","key","cleanScrapeVal","forms","keyName","userInput","scrapeVal","cleanInput","isValid","isComplete","input","props","type","onChange","handleFiles","accept","className","ref","setFileInput","SelectionTabs","setData","d","dataObject","clsName","cls","getClassNameForSelectionTab","onClick","newData","i","getSelectionTab","validState","null","undefined","true","false","Titles","filter","scrapetimestamp","scraperVersion","fileName","nxtcloudpath","split","pop","form","totalForms","totalFormsComplete","getTitles","getInvalids","push","obj","idObj","recordid","apn","crawltimestamp","filepath","field","getInvalidForms","getErrorCSV","invalids","headerRows","curr","getHeaderRows","firstRow","csvContent","row","join","encodeURI","getSubmitButton","userName","batchId","isUserNameEmpty","isBatchIdEmpty","flag","length","href","download","Buttons","Details","getClassNameForGoodBtn","getClassNameForBadBtn","UserInput","handleChange","event","val","target","value","handleUserInput","getUserInputComponent","src","alt","setFormGood","setFormBad","getUserInputConditionally","getFormInputs","f","oldForm","newForm","isUserInputValid","getFormInput","Forms","Main","Idinput","title","setValue","Userid","setUserName","Batchid","setBatchId","Identification","ValidationError","ret","info","k","getValidationErrorComponent","userid_key","App","useState","setConfig","defaultValue","stickyValue","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","useLocalStorage","a","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbd1f830.chunk.js","sourcesContent":["\r\n\r\nconst trimCleaner = (data) => data != null ? data.trim() : '';\r\nconst quoteCleaner = (data) => data.replace(/^[\\\"']/,'').replace(/[\\\"']$/,'');\r\nconst commaCleaner = (data) => data.replace(/^[,]/,'').replace(/[,]$/,'');\r\nconst numericalCleaner = (data) => data.replace(/[^\\d.]/g,'');\r\nconst dollarCleaner = (data) => data.replace(/[\\$,]/g,'');\r\nconst defaultDates = ['','1970-01-01','1/1/1970','01/01/1970','0'];\r\nconst isInvalidDate = data => new Date(data) == 'Invalid Date';\r\nconst isDefaultOrInvalidDate = data => defaultDates.some(dt => dt == data) || isInvalidDate(data);\r\n//const dateCleaner = (data) => isDefaultOrInvalidDate(data) ? '1970-01-01' : data;\r\nconst getUTCOffsetDate = (utcInputDateString) => {\r\n    let dt = new Date(utcInputDateString);\r\n    return new Date(dt.getTime()-(dt.getTimezoneOffset()*60*1000));\r\n}\r\nconst dateCleaner = (data) => {\r\n    let cleanData = data.replace(/[^\\d\\/\\-]/g,'');\r\n    \r\n    let date = getUTCOffsetDate(cleanData);\r\n    console.log({inputDate:data, cleanData,date});\r\n    return `${date.getUTCMonth()+1}/${date.getUTCDate()}/${date.getUTCFullYear()}`;\r\n}\r\nconst sqftCleaner = (data) => data.replace('sqft','').trim();\r\nconst zeroCleaner = (data) => +data == 0 ? '' : data;\r\n//â€“\r\n\r\nconst cleaningPipe = (data,...functions) => {\r\n    let cleanData = data;\r\n    functions.forEach(fun => {\r\n        cleanData = fun(cleanData);\r\n    })\r\n    return cleanData;\r\n}\r\n\r\nconst apnCleaner = (data) => cleaningPipe(data,trimCleaner);\r\n\r\nconst inputByCleaner = (data) => cleaningPipe(data,trimCleaner);\r\n\r\nconst batchIdCleaner = (data) => cleaningPipe(data,trimCleaner,quoteCleaner,commaCleaner,quoteCleaner);\r\n\r\nconst scraperVersionCleaner = (data) => cleaningPipe(data,trimCleaner,quoteCleaner);\r\n\r\n\r\nconst emptyCleaner = (data) => data;\r\nconst streetCleaner = (data) => cleaningPipe(data,trimCleaner,commaCleaner);\r\nconst cityCleaner = (data) => cleaningPipe(data,trimCleaner,commaCleaner);\r\nconst stateCleaner = (data) => cleaningPipe(data,trimCleaner,commaCleaner);\r\nconst zipCleaner = (data) => cleaningPipe(data,trimCleaner,commaCleaner);\r\nconst priceCleaner = (data) => cleaningPipe(data,trimCleaner,numericalCleaner);\r\nconst bedroomsCleaner = (data) => cleaningPipe(data,trimCleaner,numericalCleaner);\r\nconst bathroomsCleaner = (data) => cleaningPipe(data,trimCleaner,numericalCleaner);\r\nconst hometypeCleaner = (data) => cleaningPipe(data,trimCleaner);\r\nconst soldDateCleaner = (data) => cleaningPipe(data,trimCleaner,dateCleaner);\r\nconst soldpriceCleaner = (data) => cleaningPipe(data,trimCleaner,numericalCleaner,zeroCleaner);\r\nconst livingareasqftCleaner = (data) => cleaningPipe(data,sqftCleaner,trimCleaner,numericalCleaner);\r\nconst EstimateSqftCleaner = (data) => cleaningPipe(data,trimCleaner,numericalCleaner);\r\nconst ownernamesCleaner = (data) => cleaningPipe(data,trimCleaner);\r\nconst mailingaddressCleaner = (data) => cleaningPipe(data,trimCleaner);\r\n\r\nexport {\r\n    apnCleaner,\r\n    emptyCleaner,\r\n    streetCleaner,\r\n    cityCleaner,\r\n    stateCleaner,\r\n    zipCleaner,\r\n    priceCleaner,\r\n    bedroomsCleaner,\r\n    bathroomsCleaner,\r\n    hometypeCleaner,\r\n    soldDateCleaner,\r\n    soldpriceCleaner,\r\n    livingareasqftCleaner,\r\n    EstimateSqftCleaner,\r\n    ownernamesCleaner,\r\n    mailingaddressCleaner\r\n}","import {\r\n    apnCleaner,\r\n    emptyCleaner,\r\n    streetCleaner,\r\n    cityCleaner,\r\n    stateCleaner,\r\n    zipCleaner,\r\n    priceCleaner,\r\n    bedroomsCleaner,\r\n    bathroomsCleaner,\r\n    hometypeCleaner,\r\n    soldDateCleaner,\r\n    soldpriceCleaner,\r\n    livingareasqftCleaner,\r\n    EstimateSqftCleaner,\r\n    ownernamesCleaner,\r\n    mailingaddressCleaner\r\n} from './utility/cleaners';\r\n\r\nconst summaryConfig = {\r\n    \"street\": {\r\n        label: 'Street',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: streetCleaner,\r\n        image: 'street.PNG'\r\n    },\r\n    \"city\": {\r\n        label: 'City',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: cityCleaner,\r\n        image: 'city.PNG'\r\n    },\r\n}\r\n\r\nconst summaryConfig_ = {\r\n    \"street\": {\r\n        label: 'Street',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: streetCleaner,\r\n        image: 'street.PNG'\r\n    },\r\n    \"city\": {\r\n        label: 'City',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: cityCleaner,\r\n        image: 'city.PNG'\r\n    },\r\n    \"state\": {\r\n        label: 'State',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: stateCleaner,\r\n        image: 'state.PNG'\r\n    },\r\n    \"zip\": {\r\n        label: 'Zip',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: zipCleaner,\r\n        image: 'zip.PNG'\r\n    },\r\n    \"price\": {\r\n        label: 'RMV',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: priceCleaner,\r\n        image: 'price.PNG'\r\n    },\r\n    \"bedrooms\": {\r\n        label: 'Bedrooms',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: bedroomsCleaner,\r\n        image: 'bedrooms.PNG'\r\n    },\r\n    \"bathrooms\": {\r\n        label: 'Bathrooms',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: bathroomsCleaner,\r\n        image: 'bathrooms.PNG'\r\n    },\r\n    \"livingareasqft\": {\r\n        label: 'Living Area Sqft',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: livingareasqftCleaner,\r\n        image: 'livingareasqft.PNG'\r\n    },\r\n    \"hometype\": {\r\n        label: 'Type',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: hometypeCleaner,\r\n        image: 'hometype.PNG'\r\n    },\r\n    \"soldprice\": {\r\n        label: 'Last Sold Price',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: soldpriceCleaner,\r\n        image: 'soldprice.PNG'\r\n    },\r\n    \"soldDate\": {\r\n        label: 'Sold Date',\r\n        sourceCleaner: soldDateCleaner,\r\n        inputCleaner: soldDateCleaner,\r\n        image: 'solddate.PNG'\r\n    },\r\n    \"Estimate/sqft\": {\r\n        label: 'Price by sq ft',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: EstimateSqftCleaner,\r\n        image: 'estimatesqft.PNG'\r\n    },\r\n    \"ownernames\": {\r\n        label: 'Owner Name (Public)',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: ownernamesCleaner,\r\n        image: 'ownernames.PNG'\r\n    },\r\n    \"mailingaddress\": {\r\n        label: 'Mailing Address',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: mailingaddressCleaner,\r\n        image: 'mailingaddress.PNG'\r\n    },\r\n    \"apn\": {\r\n        label: 'Parecel Number',\r\n        sourceCleaner: emptyCleaner,\r\n        inputCleaner: apnCleaner,\r\n        image: 'apn.PNG'\r\n    }\r\n}\r\n\r\nconst typeConfig = {\r\n    'Summary': summaryConfig\r\n}\r\n\r\nconst summaryIdentifiers = [\r\n    'apn', 'scraperVersion'\r\n]\r\n\r\nconst types = Object.keys(typeConfig);\r\n\r\nexport { typeConfig, types, summaryIdentifiers };\r\n","\r\n//import csv from 'csvtojson';\r\n\r\nconst convertFileToBase64 = (allFiles) => {\r\n    return new Promise((resolve)=> {\r\n        let ef = allFiles;\r\n        let file = ef[0];\r\n        let files = { base64: '', fileList: ef };\r\n        let reader = new FileReader();\r\n\r\n        reader.onloadend = e => {\r\n            files.base64 = reader.result;\r\n            //this.props.handleFiles(files);\r\n            resolve(files);\r\n        }\r\n        reader.readAsText(file);\r\n        //reader.readAsDataURL(file);\r\n    })\r\n    \r\n}\r\n\r\nconst getContentInJSON = (content) => {\r\n    return new Promise((resolve)=> {\r\n        window.csvtojsonV2()\r\n        .fromString(content)\r\n        .then(function(result){\r\n            resolve(result);\r\n        })\r\n    })\r\n    \r\n}\r\n\r\nconst getConfiguredData = (config,idArray,inputJSON)  => {\r\n    return inputJSON.map((json,index) => {\r\n        let identifier = idArray.reduce((acc,id)=>{\r\n            acc[id] = json[id];\r\n            return acc;\r\n        },{});\r\n        let isSelected = index == 0;\r\n        return Object.keys(config).reduce((acc,key)=>{\r\n            const {label,image,sourceCleaner} = config[key];\r\n            let cleanScrapeVal = typeof sourceCleaner == 'function'\r\n                                    ?sourceCleaner(json[key])\r\n                                    :json[key];\r\n            acc.forms[key] = {\r\n                keyName:key,label,image,userInput:'',\r\n                scrapeVal: cleanScrapeVal, cleanInput:'',\r\n                isValid: null\r\n            };\r\n            return acc;\r\n        },{identifier,index,isValid: null,forms:{},isSelected,isComplete:false,input:json});\r\n    })\r\n}\r\n\r\nexport {\r\n    convertFileToBase64,\r\n    getContentInJSON,\r\n    getConfiguredData\r\n}","import React from 'react'\r\n\r\nfunction FileReader(props) {\r\n    return (\r\n        <>\r\n          <input type='file'\r\n            onChange={props.handleFiles}\r\n            accept=\".csv\"\r\n            className='react-file-reader-input'\r\n            ref={props.setFileInput}\r\n        />  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FileReader\r\n","import React from 'react'\r\n\r\nconst getClassNameForSelectionTab = (isSelected,isComplete) => {\r\n    let cls = 'tab-btn'\r\n    cls += isComplete ? ' tab-complete' : ' tab-incomplete';\r\n    cls += isSelected ? ' tab-active' : '';\r\n    return cls;\r\n}\r\n\r\nconst getSelectionTab = (dataObject,setData,data) => {\r\n    let {index,isSelected,isComplete} = dataObject;\r\n    const setSelection = () => {\r\n        let newData = [...data];\r\n        newData.forEach((d,i)=>{\r\n            d.isSelected = i == index;\r\n        })\r\n        setData(newData);\r\n    }\r\n    let clsName = getClassNameForSelectionTab(isSelected,isComplete);\r\n    return (\r\n        <div className={clsName} onClick={setSelection} key={`tab_${index}`}>\r\n            {index + 1}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SelectionTabs({data,setData}) {\r\n    return (\r\n        <div className=\"tab-container\">\r\n                {data.map(d => getSelectionTab(d,setData,data))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectionTabs\r\n","const validState = {\r\n    null : 'Pending',\r\n    undefined: 'Pending',\r\n    true: 'Good',\r\n    false: 'Bad'\r\n}\r\n\r\nexport {\r\n    validState\r\n}","import React from 'react'\r\nimport {validState} from '../../utility/constants';\r\n\r\nconst getTitles = ({input,forms,isComplete,isValid,index}) => {\r\n    /*\r\n    <div class=\"title-box\">Scraper Version: 8456213789</div>\r\n    <div class=\"title-box\">Scraped timestamp: 2021-01-31 21:37:27.897+00</div>\r\n    <div class=\"title-box\">#Inputs Assessed: 5/10</div>\r\n    */\r\n    let { scrapetimestamp, scraperVersion, nxtcloudpath } = input;\r\n    let fileName = nxtcloudpath.split('/').pop();\r\n    let { totalForms, totalFormsComplete } = Object.keys(forms).reduce((acc, key) => {\r\n        let form = forms[key];\r\n        acc.totalForms += 1;\r\n        acc.totalFormsComplete += form.isValid == true || (form.isValid == false && form.userInput.trim() != '')\r\n            ? 1 : 0;\r\n        return acc;\r\n    }, { totalForms: 0, totalFormsComplete: 0 });\r\n    return(\r\n        <>\r\n            <div key={`fileName_${index}`} className=\"title-box\">{`File name: ${fileName}`}</div>\r\n            <div key={`scraperVersion_${index}`} className=\"title-box\">{`Scraper Version: ${scraperVersion}`}</div>\r\n            <div key={`scrapetimestamp_${index}`} className=\"title-box\">{`Scraped timestamp: ${scrapetimestamp}`}</div>\r\n            <div key={`totalForms_${index}`} className=\"title-box\">{`Total Inputs: ${totalForms}`}</div>\r\n            <div key={`totalFormsComplete_${index}`} className=\"title-box\">{`Total Inputs assessed: ${totalFormsComplete}`}</div>\r\n            <div key={`isComplete_${index}`} className=\"title-box\">{`Complete? ${isComplete}`}</div>\r\n            <div key={`isValid_${index}`} className=\"title-box\">{`Status: ${validState[isValid]}`}</div>\r\n            \r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction Titles({data}) {\r\n    return (\r\n        <div className=\"titles-container\">\r\n            {data\r\n                .filter(d => d.isSelected)\r\n                .map(d => getTitles(d))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Titles\r\n","import React from 'react'\r\n\r\nconst getInvalidForms = (obj) => {\r\n    let {recordid,apn,scraperVersion,crawltimestamp,scrapetimestamp,filepath} = obj.input;\r\n    let idObj = {recordid,apn,scraperVersion,crawltimestamp,scrapetimestamp,filepath};\r\n    return Object.keys(obj.forms).reduce((acc,key)=>{\r\n        let form = obj.forms[key];\r\n        if(form.isValid == false){\r\n            //acc[`scrape_${key}`] = form.scrapeVal;\r\n            //acc[`user_input_${key}`] = form.userInput;\r\n            //acc[`clean_input_${key}`] = form.cleanInput;\r\n            let {scrapeVal,userInput,cleanInput} = form;\r\n            acc.push({...idObj,field:key,scrapeVal,userInput,cleanInput});\r\n        }            \r\n        return acc;\r\n    },[])\r\n    //},{recordid,apn,scraperVersion,crawltimestamp,scrapetimestamp,filepath})\r\n}\r\n\r\nconst getInvalids = (data) => {\r\n    return data.reduce((acc,d)=>{\r\n        if(d.isValid == false){\r\n            acc.push(...getInvalidForms(d));\r\n        }\r\n        return acc;\r\n    },[])\r\n}\r\n\r\nconst getHeaderRows = (invalids) => {\r\n    let index = -1;\r\n    return invalids.reduce((acc,curr)=>{\r\n        Object.keys(curr).forEach(key => {\r\n            acc[key] = acc[key] == null ? ++index : acc[key];\r\n        })\r\n        return acc;\r\n    },{});\r\n\r\n}\r\n\r\nconst getErrorCSV = (data) => {\r\n    let invalids = getInvalids(data);\r\n    let headerRows = getHeaderRows(invalids);\r\n    let firstRow = Object.keys(headerRows).reduce((acc,key)=>{\r\n        acc[[headerRows[key]]] = key;\r\n        return acc;\r\n    },[])\r\n    let csvRows = invalids.reduce((acc,curr)=>{\r\n        let row = [];\r\n        Object.keys(curr).forEach(key => {\r\n            //acc[key] = acc[key] == null ? ++index : acc[key];\r\n            row[headerRows[key]] = curr[key];\r\n        })\r\n        acc.push(row);\r\n        return acc;\r\n    },[firstRow])\r\n    let csvContent = \"data:text/csv;charset=utf-8,\" \r\n                        + csvRows.map(e => e.join(\",\")).join(\"\\n\");\r\n    return encodeURI(csvContent);\r\n}\r\n\r\nconst getSubmitButton = (data,userName,batchId) => {\r\n    let isUserNameEmpty = userName == null || userName.trim() === '';\r\n    let isBatchIdEmpty = batchId == null || batchId.trim() === '';\r\n    let flag = data.length > 0 && !isUserNameEmpty && !isBatchIdEmpty;\r\n    let {isValid,isComplete} = data.reduce((acc,d)=>{\r\n        acc.isValid = acc.isValid && d.isValid == true;\r\n        acc.isComplete = acc.isComplete && d.isComplete == true;\r\n        return acc;\r\n    },{isValid:flag,isComplete:flag})\r\n    if(!isValid  && isComplete ){\r\n        return <a className=\"title-button anchor-button\" href={getErrorCSV(data)} download=\"invalid_csv.csv\">Get CSV with invalids</a>\r\n    }\r\n}\r\n\r\nfunction Buttons({data,userName,batchId}) {\r\n    return (\r\n        <div className=\"buttons-container\">\r\n            {getSubmitButton(data,userName,batchId)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons\r\n","import React from 'react';\r\nimport Titles from './Titles';\r\nimport Buttons from './Buttons';\r\n\r\n\r\nfunction Details(props) {\r\n    return (\r\n        <div className=\"header-container\">\r\n            <Titles {...props} />\r\n            <Buttons {...props} />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details","import React from 'react'\r\nimport {validState} from '../../utility/constants';\r\n\r\nconst getClassNameForGoodBtn = (isValid) => {\r\n    let className = 'status-btn good-btn';\r\n    if(isValid == true){\r\n        className += ' active';\r\n    }\r\n    return className;\r\n}\r\n\r\nconst getClassNameForBadBtn = (isValid) => {\r\n    let className = 'status-btn bad-btn';\r\n    if(isValid == false){\r\n        className += ' active';\r\n    }\r\n    return className;\r\n}\r\n\r\nconst UserInput = (props) => {\r\n    \r\n    const handleChange = (event) => {\r\n        let val = event.target.value;\r\n        props.handleUserInput(val);\r\n    }\r\n\r\n    const getUserInputConditionally = (isValid) => {\r\n        if(isValid == false){\r\n            return getUserInputComponent();\r\n        }\r\n    }\r\n\r\n    const getUserInputComponent = () => {\r\n       return (\r\n        <div className=\"correction-box\">\r\n            <label>Correct Value</label>\r\n            <input className=\"correct-input\" type=\"text\" value={props.userInput} onChange={handleChange} />\r\n        </div>\r\n       )\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"content-container\">\r\n            <div className=\"content-title-container\">\r\n                <span className=\"content-title\">{props.label}</span>\r\n                <span className=\"content-status\">{validState[props.isValid]}</span>\r\n            </div>\r\n            <div className=\"content-body-container\">\r\n                <div className=\"img\">\r\n                    <img src={`img/${props.image}`} alt=\"\"></img>\r\n                </div>\r\n                \r\n                <div className=\"value-box\">\r\n                    Value: <span className=\"value\">{props.scrapeVal}</span>\r\n                </div>\r\n                <div className=\"row-buttons-container\">\r\n                    <div \r\n                        className={getClassNameForGoodBtn(props.isValid)} \r\n                        onClick={props.setFormGood}>\r\n                        Good\r\n                    </div>\r\n                    <div \r\n                        className={getClassNameForBadBtn(props.isValid)} \r\n                        onClick={props.setFormBad}>\r\n                        BAD\r\n                    </div>\r\n                </div>\r\n                {getUserInputConditionally(props.isValid)}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default UserInput\r\n","import React from 'react'\r\nimport UserInput from './UserInput';\r\n\r\nconst getFormInput =(form,index,data,setData,config)=> {\r\n    const handleUserInput = (userInput) => {\r\n        let oldForm = data[index].forms[form.keyName];\r\n        let inputCleaner = config[form.keyName] != null ? config[form.keyName].inputCleaner : null;\r\n        let cleanInput = typeof inputCleaner == 'function'\r\n                            ? inputCleaner(userInput)\r\n                            : userInput;\r\n        //let isValid = validator(cleanInput,oldForm.scrapeVal);\r\n        let newForm = {...oldForm,userInput,cleanInput};\r\n        let newData = [...data];\r\n        newData[index].forms[form.keyName] = newForm;\r\n        let isComplete = true;\r\n        Object.keys(newData[index].forms).forEach(key => {\r\n            let form = newData[index].forms[key];\r\n            isComplete = isComplete && form.isValid != null && userInput.trim() != \"\";\r\n        })\r\n        newData[index].isComplete = isComplete;\r\n        newData[index].isValid = isComplete ? false : newData[index].isValid;\r\n        setData(newData);\r\n    }\r\n\r\n    const setFormGood = () => {\r\n        let oldForm = data[index].forms[form.keyName];\r\n        let newForm = {...oldForm,isValid:true};\r\n        let newData = [...data];\r\n        newData[index].forms[form.keyName] = newForm;\r\n        let isComplete = true;\r\n        let isValid = true;\r\n        let isUserInputValid = false;\r\n        Object.keys(newData[index].forms).forEach(key => {\r\n            let form = newData[index].forms[key];\r\n            isUserInputValid = form.isValid == true || (form.isValid == false && form.userInput.trim() != '');\r\n            isValid = isValid && form.isValid == true;\r\n            isComplete = isComplete && form.isValid != null && isUserInputValid;\r\n            \r\n        })\r\n        newData[index].isComplete = isComplete;\r\n        newData[index].isValid = isComplete ? isValid : newData[index].isValid;\r\n        setData(newData);\r\n    }\r\n\r\n    const setFormBad = () => {\r\n        let oldForm = data[index].forms[form.keyName];\r\n        if(oldForm.isValid == null || oldForm.isValid == true){\r\n            let newForm = {...oldForm,isValid:false,userInput:'',cleanInput:''};\r\n            let newData = [...data];\r\n            newData[index].forms[form.keyName] = newForm;\r\n            newData[index].isComplete = false;\r\n            newData[index].isValid = null;\r\n            setData(newData);\r\n        }            \r\n    }\r\n    return (\r\n        <span key={index+form.keyName}>\r\n            <UserInput {...form} \r\n                handleUserInput={handleUserInput} \r\n                setFormGood={setFormGood}\r\n                setFormBad={setFormBad}\r\n            />\r\n        </span>\r\n    )\r\n\r\n}\r\n\r\nconst getFormInputs = (d,data,setData,config) => {\r\n    return (\r\n        <div key={d.index} className=\"body-container\">\r\n            {\r\n                Object.keys(d.forms).map(f => getFormInput(d.forms[f],d.index,data,setData,config))\r\n            }             \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Forms({data,setData,config}) {\r\n    return data\r\n                .filter(d => d.isSelected == true)\r\n                .map(d => getFormInputs(d,data,setData,config));\r\n}\r\n\r\nexport default Forms\r\n","import React from 'react'\r\nimport Forms from './Forms';\r\n//{data,setData,config,userName,batchId}\r\nfunction Main(props) {\r\n    return (\r\n        <>\r\n            <Forms {...props}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\n\r\nfunction Idinput({title,value,setValue}) {\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n    return (\r\n        <div className=\"identification-box\">\r\n            <label>{title}</label>\r\n            <input className=\"correct-input\" type=\"text\" value={value} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Idinput\r\n","import React from 'react'\r\nimport Idinput from './Idinput';\r\n\r\nconst Userid = ({userName,setUserName}) => {\r\n    return (\r\n        <>\r\n            <Idinput title=\"User name\" value={userName} setValue={setUserName} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst Batchid = ({batchId,setBatchId}) => {\r\n    return (\r\n        <>\r\n            <Idinput title=\"Batch ID\" value={batchId} setValue={setBatchId} />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Identification(props) {\r\n    return (\r\n        <div className=\"identification\">\r\n            <Userid {...props} />\r\n            <Batchid {...props} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Identification","import React from 'react'\r\n\r\nconst getValidationErrorComponent = (data,obj)=> {\r\n    let {isValid,isComplete} = data.reduce((acc,d)=>{\r\n        acc.isValid = acc.isValid && d.isValid == true;\r\n        acc.isComplete = acc.isComplete && d.isComplete == true;\r\n        return acc;\r\n    },{isValid:true,isComplete:true})\r\n    let info = Object.keys(obj)\r\n                .filter(k => obj[k] == true)\r\n    if(!isValid  && isComplete && info.length > 0 ){\r\n        return (\r\n            <div className=\"error-top\">\r\n                {`Please Provide required info: [${info}]`}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction ValidationError({userName,batchId,data}) {\r\n    let isUserNameEmpty = userName == null || userName.trim() === '';\r\n    let isBatchIdEmpty = batchId == null || batchId.trim() === '';\r\n    let flag = data.length > 0;\r\n    let ret;\r\n    if(flag && (isUserNameEmpty || isBatchIdEmpty)){\r\n        let obj = {'User name':isUserNameEmpty,'Batch ID':isBatchIdEmpty};\r\n        ret = getValidationErrorComponent(data,obj);\r\n    }\r\n    return ret == null ? <></> : ret;\r\n}\r\n\r\nexport default ValidationError\r\n","import React, {  useState } from 'react';\nimport { typeConfig, types, summaryIdentifiers } from './typeConfig';\nimport { convertFileToBase64, getContentInJSON, getConfiguredData } from './utility';\nimport {useLocalStorage} from './utility/storage';\n// import csv from './utility/csvtojson3';\n\nimport FileReader from './components/FileReader';\nimport SelectionTabs from './components/SelectionTabs';\nimport Details from './components/Details';\nimport Main from './components/Main';\nimport Identification from './components/Identification';\nimport ValidationError from './components/Details/ValidationError';\n\n\nconst appid = 'scraper_quality';\nconst userid_key = `${appid}_userid`;\n\nconst App = () => {\n    const [fileInput, setFileInput] = useState();\n    const [data, setData] = useState([]);\n    const [type, setType] = useState(types[0]);\n    const [config, setConfig] = useState({});\n    const [userName,setUserName] = useLocalStorage(null,userid_key);\n    const [batchId,setBatchId] = useState('');\n\n    const handleFiles = async (event) => {\n        let files = await convertFileToBase64(event.target.files);\n        let json = await getContentInJSON(files.base64);\n        const data = getConfiguredData(typeConfig[type], summaryIdentifiers, json)\n        //console.log({ json });\n        //console.log(event.target.files);\n        setConfig(typeConfig[type]);\n        setData(data);\n    }\n\n    return (\n        <div className=\"app\">\n            <header>\n                <FileReader handleFiles={handleFiles} setFileInput={setFileInput} setBatchId={setBatchId}/>\n                <Identification \n                  userName={userName} setUserName={setUserName}\n                  batchId={batchId} setBatchId={setBatchId}\n                />\n                <ValidationError data={data} userName={userName} batchId={batchId} />\n                <Details data={data} userName={userName} batchId={batchId}/>\n                <SelectionTabs data={data} setData={setData}/>\n                \n                \n            </header>\n            <main>\n              <Main data={data} setData={setData} config={config} userName={userName} batchId={batchId}/>\n            </main>\n            \n        </div>\n    )\n\n\n}\n\nexport default App;","import React, { useEffect, useState } from 'react';\r\n\r\nconst useLocalStorage = (defaultValue, key) => {\r\n    const [value, setValue] = useState(() => {\r\n      const stickyValue = window.localStorage.getItem(key);\r\n      return stickyValue !== null\r\n        ? JSON.parse(stickyValue)\r\n        : defaultValue;\r\n    });\r\n    useEffect(() => {\r\n      window.localStorage.setItem(key, JSON.stringify(value));\r\n    }, [key, value]);\r\n    return [value, setValue];\r\n}\r\n\r\nexport {\r\n    useLocalStorage\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}